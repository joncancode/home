{"version":3,"sources":["components/NavBar.js","components/Home.js","components/Projects.js","components/Blog.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Component","Home","Projects","Blog","NotFound","App","ReactGA","initialize","pageview","window","location","pathname","search","HashRouter","className","components_NavBar","Switch","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac235b2d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class NavBar extends Component {\n  render() {\n    return (\n      <div>\n        <h2>NavBar</h2>\n      </div>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\n\nexport class Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Home.</h2>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\n\nexport class Projects extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Projects</h2>\n      </div>\n    )\n  }\n}\n\nexport default Projects\n","import React, { Component } from 'react'\n\nexport class Blog extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Blog</h2>\n      </div>\n    )\n  }\n}\n\nexport default Blog\n","import React, { Component } from 'react'\n\nexport class NotFound extends Component {\n  render() {\n    return (\n      <div>\n        <h2>404 NOT FOUND</h2>\n      </div>\n    )\n  }\n}\n\nexport default NotFound\n","import ReactGA from 'react-ga';\nimport React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Projects from './components/Projects';\nimport Blog from './components/Blog';\nimport NotFound from './components/NotFound';\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    ReactGA.initialize('UA-131514420-1');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }\n  \n  render() {\n    return (\n      <HashRouter>\n          <div className=\"App\">\n            <NavBar />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/about\" component={Home} />\n              <Route exact path=\"/projects\" component={Projects} />\n              <Route exact path=\"/blog\" component={Blog} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}